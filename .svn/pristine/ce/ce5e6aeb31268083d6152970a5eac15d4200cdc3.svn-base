package bluedot.spectrum.service.impl;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;

import javax.tools.Diagnostic;
import javax.tools.DiagnosticCollector;
import javax.tools.JavaCompiler;
import javax.tools.JavaFileObject;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;

import bluedot.spectrum.commons.algorithm.method.PretreatmentAlgorithm;
import bluedot.spectrum.commons.vo.SpectrumFile;
import bluedot.spectrum.service.AlgorithmService;
import bluedot.spectrum.service.exception.ServiceException;
import bluedot.spectrum.utils.algorithm.AlgorithmClassLoader;
import bluedot.spectrum.utils.algorithm.AlgorithmClassLoaderSingleton;
import bluedot.spectrum.utils.algorithm.cache.AlgorithmCache;
import bluedot.spectrum.utils.algorithm.cache.AlgorithmEntry;
import bluedot.spectrum.utils.algorithm.cache.EnumSingleton;
import bluedot.spectrum.utils.spectrum.SpectrumUtils;

public class AlgorithmServiceImpl implements AlgorithmService{
	
	private AlgorithmCache<String,PretreatmentAlgorithm> concurrentHashMap = new AlgorithmCache(100);
	public SpectrumFile pretreatmentAlgorithm(String algorithmFilePath, SpectrumFile spectrumFile) {
		// TODO Auto-generated method stub
		
		double[][] points = SpectrumUtils.getSpectrumFilePoints(spectrumFile);
		File libPath = new File(algorithmFilePath);
		//获取该目录下所有.jar或者.zip文件
		File[] jarFiles = libPath.listFiles(
				(FilenameFilter) (File dir, String name) ->  {return name.endsWith(".class") || name.endsWith(".jar") || name.endsWith(".zip");
				});
		try {
			for (File file : jarFiles) {
				String classURL  = file.getName();
				classURL =  classURL.replaceAll(".class", "");
				if(concurrentHashMap.get(classURL)==null){
					loaderAlgorithmClass(algorithmFilePath);
				}
				points = concurrentHashMap.get(classURL).getValue().pretreatmentAlgorithm(points);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		spectrumFile = SpectrumUtils.setSpectrumFilePoints(points, spectrumFile);
		return spectrumFile;
	}
	
	@Override
	public SpectrumFile analysisAlgorithm(String algorithmFilePath,SpectrumFile spectrumFile) {
		/*loaderAlgorithmClass(algorithmFilePath);*/
		/**
		 * 待完善
		 */
		return null;
	}

	/**
	 * 加载算法类
	 * WFP
	 * @param algorithmFilePath	算法类路径
	 * 2018年3月17日
	 */
	private void loaderAlgorithmClass(String algorithmFilePath) {
		// TODO Auto-generated method stub
		File libPath = new File(algorithmFilePath);
		
		//获取该目录下所有.jar或者.zip文件
		File[] jarFiles = libPath.listFiles(
				(FilenameFilter) (File dir, String name) ->  {return name.endsWith(".class") || name.endsWith(".jar") || name.endsWith(".zip");
				});
		
		if(jarFiles != null){
			AlgorithmClassLoader classLoader = AlgorithmClassLoaderSingleton.getAlgorithmClassLoader();
			classLoader.setBasPath(algorithmFilePath+"/");
			
			for (File file : jarFiles) {  
				String classURL  = file.getName();
				classURL =  classURL.replaceAll(".class", "");
				if(concurrentHashMap.get(classURL)==null){
		            try {
						Class<?> clazz = Class.forName(classURL, true, classLoader) ;
						PretreatmentAlgorithm obj = (PretreatmentAlgorithm) clazz.newInstance();
						AlgorithmEntry<String, PretreatmentAlgorithm> algorithmEntry = new AlgorithmEntry<String, PretreatmentAlgorithm>(classURL, obj);
						concurrentHashMap.put(classURL, algorithmEntry);
					} catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}else{
					return;
				}
	        }  
			
			
		}
	}

	@Override
	public boolean checkAlgorithm(String filePath,String msg) {
		// TODO Auto-generated method stub
		
		long star = System.currentTimeMillis(); //开始编译时间

        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();   //获取系统编译器

        DiagnosticCollector<JavaFileObject> diagnosticCollector = new DiagnosticCollector<>();  //  建立ClassFileManager对象
        StandardJavaFileManager fileManager =
                compiler.getStandardFileManager(diagnosticCollector,null,null);
        //StandardJavaFileManager类(文件管理器)可以很好地控制输入、输出，并且能通过DiagnosticListener得到诊断信息

        //
        File sourceFile = new File(filePath);
        List<File> javaFileList = new ArrayList<>();
        getJavaFiles(sourceFile, javaFileList);
        if(javaFileList.size() == 0){
        	System.out.println(filePath+"中找不到.java文件！");
        	return false;
        }
        
        // 建立用于保存被编译文件名的对象（编译单元）;每个文件被保存在一个从JavaFileObject继承的类中
        Iterable<? extends JavaFileObject> compilationUnits = fileManager
                    .getJavaFileObjectsFromFiles(javaFileList);
        //使用编译选项可以改变默认编译行为。编译选项是一个元素为String类型的Iterable集合
        List<String> options = new ArrayList<String>();

        options.add("-target");
        options.add("1.8");
        options.add("-encoding");
        options.add("UTF-8");
        options.add("-d");
        options.add(filePath);

        JavaCompiler.CompilationTask compilationTask =
                compiler.getTask(null,fileManager,diagnosticCollector,options,null,compilationUnits);
        boolean flag = compilationTask.call();
        if (flag){
            return flag;
        }else {
            //如果想得到具体的编译错误，可以对Diagnostics进行扫描
            String error = "";
            for (Diagnostic diagnostic : diagnosticCollector.getDiagnostics()) {
                error = error + diagnostic;
            }
            System.out.println(error);
            return !flag;
        }
	}
	
	/**
	 * 寻找该目录下的所有.java文件
	 * WFP
	 * @param sourceFile
	 * @param javaFileList
	 * 2018年3月8日
	 */
	private void getJavaFiles(File sourceFile, List<File> javaFileList){
	System.out.println(sourceFile);	
		//判断文件或目录是否存在
		if(sourceFile.exists() && sourceFile != null){
			if(sourceFile.isDirectory()){
			
				File[] childFiles = sourceFile.listFiles((File pathname) ->{
					if (pathname.isDirectory()) {  
                        return true;  
                    } else {  
                        String name = pathname.getName();  
                        return name.endsWith(".java") ? true : false;  
                    }  
				}); 
				
				for(File childFile : childFiles){
					getJavaFiles(childFile, javaFileList);
				}
			}else{
				File file = new File(newFileName(sourceFile));
				
				boolean result = sourceFile.renameTo(file);
				if(result == false){
					throw new ServiceException("文件无法重命名，动态编译失败！");
				}
				javaFileList.add(file);
			}
				
		}
	}
	
	/**
	 * 获取新的文件名
	 * WFP
	 * @param sourceFile
	 * @return
	 * 2018年3月16日
	 */
	private String newFileName(File sourceFile) {
		String newClassName = "New"+sourceFile.getName();

		//修改类名
		ChangeClassName(sourceFile, newClassName);	

		// TODO Auto-generated method stub
		String newFileName = sourceFile.getAbsolutePath();
		newFileName = newFileName.replaceAll(sourceFile.getName(), newClassName);
		newFileName = newFileName.replaceAll("\\\\", "/");
		return newFileName;
	}

	/**
	 * 修改类名
	 * WFP
	 * @param sourceFile
	 * @param newClassName
	 * 2018年3月16日
	 */
	private void ChangeClassName(File sourceFile, String newClassName) {
		try {
			InputStream in = new FileInputStream(sourceFile);
			BufferedReader reader = new BufferedReader(new InputStreamReader(in,"UTF-8"));
			
			StringBuilder fileContext = new StringBuilder();
			String line = "";
			while ((line = reader.readLine())!=null){
				String className = "";
				if(line!=null && line.contains("class")){
					
					boolean flag = true;
					for (int i = line.indexOf(" class ")+7; i < line.length(); i++) {
						if(line.charAt(i)!=' '){
							className = className + line.charAt(i);
							flag = false;
						}else{
							if(flag==false){
								break;
							}
						}
						
					}
					 String[] newClassNameArray = newClassName.split("\\.");
					 if(newClassNameArray[0]!=null){
						 line = line.replaceAll(className,newClassNameArray[0]);
					 }
				}
				fileContext.append(line+"\r\n");
			}
			in.close();
			reader.close();
			
			OutputStream out = new FileOutputStream(sourceFile);
			BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out,"UTF-8"));
			writer.write(fileContext.toString());
			writer.flush();
			out.close();
			writer.close();
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}


	

}
